generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cart {
  id                 Int      @id @default(autoincrement())
  number_of_items    Int?     @default(0)
  total_product_cost Decimal? @default(0.00) @db.Decimal(10, 2)
  users              users?
}

model category {
  id              Int               @id @default(autoincrement())
  discount_id     Int?
  category_name   String            @db.VarChar(100)
  discount        discount?         @relation(fields: [discount_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categoryproduct categoryproduct[]
}

model categoryproduct {
  category_id Int
  product_id  Int
  category    category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product     product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([category_id, product_id])
}

model discount {
  id             Int        @id @default(autoincrement())
  description    String?
  discount_type  Boolean
  discount_value Int
  category       category[]
  product        product[]
}

model fee {
  id          Int          @id @default(autoincrement())
  fee_type    Boolean
  amount_type Boolean
  productfee  productfee[]
}

model orderproduct {
  order_id   Int
  product_id Int
  quantity   Int     @default(1)
  orders     orders  @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product    product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([order_id, product_id])
}

model orders {
  id                 Int            @id @default(autoincrement())
  user_id            Int?
  location_id        Int?
  date               DateTime?      @default(now()) @db.Timestamp(6)
  total_product_cost Decimal?       @db.Decimal(10, 2)
  total_fee_cost     Decimal?       @db.Decimal(10, 2)
  payment_method     Boolean?
  total_price        Decimal?       @db.Decimal(10, 2)
  orderproduct       orderproduct[]
  location           location?      @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              users?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ordervoucher       ordervoucher[]
}

model ordervoucher {
  order_id   Int
  voucher_id Int
  orders     orders  @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  voucher    voucher @relation(fields: [voucher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([order_id, voucher_id])
}

model paymentvoucher {
  voucher_id Int     @id
  voucher    voucher @relation(fields: [voucher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model product {
  id              Int               @id @default(autoincrement())
  store_id        Int?
  discount_id     Int?
  name            String            @db.VarChar(100)
  price           Decimal           @db.Decimal(10, 2)
  size            String?           @db.VarChar(20)
  color           String?           @db.VarChar(20)
  categoryproduct categoryproduct[]
  orderproduct    orderproduct[]
  discount        discount?         @relation(fields: [discount_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  store           store?            @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productfee      productfee[]
  productvoucher  productvoucher[]
}

model productfee {
  product_id Int
  fee_id     Int
  fee        fee     @relation(fields: [fee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product    product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([product_id, fee_id])
}

model productvoucher {
  voucher_id Int      @id
  product_id Int?
  product    product? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  voucher    voucher  @relation(fields: [voucher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model shippingvoucher {
  voucher_id Int     @id
  voucher    voucher @relation(fields: [voucher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model store {
  id              Int       @id @default(autoincrement())
  store_name      String    @db.VarChar(100)
  num_of_products Int?      @default(0)
  product         product[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id            Int           @id @default(autoincrement())
  is_registered Boolean
  full_name     String?       @db.VarChar(100)
  user_name     String?       @unique @db.VarChar(100)
  email         String?       @unique @db.VarChar(100)
  password      String?       @db.VarChar(255)
  phone         String?       @db.VarChar(20)
  location_id   Int?
  cart_id       Int?          @unique
  orders        orders[]
  cart          cart?         @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  location      location?     @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uservoucher   uservoucher[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model voucher {
  id              Int              @id @default(autoincrement())
  is_percentage   Boolean
  value           Int?
  ordervoucher    ordervoucher[]
  paymentvoucher  paymentvoucher?
  productvoucher  productvoucher?
  shippingvoucher shippingvoucher?
  uservoucher     uservoucher[]
}

model location {
  id           Int      @id @default(autoincrement())
  province     String?  @db.VarChar(50)
  district     String?  @db.VarChar(50)
  commune      String?  @db.VarChar(50)
  address      String?  @db.VarChar(255)
  housing_type String?  @db.VarChar(50)
  orders       orders[]
  users        users[]
}

model uservoucher {
  user_id    Int
  voucher_id Int
  amount     Int?
  users      users   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  voucher    voucher @relation(fields: [voucher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, voucher_id])
}
